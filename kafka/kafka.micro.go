// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: kafka.proto

//定义包名.

package kafka

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for KafkaProducer service

type KafkaProducerService interface {
	SinglePublish(ctx context.Context, in *MessageRequest, opts ...client.CallOption) (*MessageResponse, error)
	MultiPublish(ctx context.Context, opts ...client.CallOption) (KafkaProducer_MultiPublishService, error)
}

type kafkaProducerService struct {
	c    client.Client
	name string
}

func NewKafkaProducerService(name string, c client.Client) KafkaProducerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "kafka"
	}
	return &kafkaProducerService{
		c:    c,
		name: name,
	}
}

func (c *kafkaProducerService) SinglePublish(ctx context.Context, in *MessageRequest, opts ...client.CallOption) (*MessageResponse, error) {
	req := c.c.NewRequest(c.name, "KafkaProducer.SinglePublish", in)
	out := new(MessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaProducerService) MultiPublish(ctx context.Context, opts ...client.CallOption) (KafkaProducer_MultiPublishService, error) {
	req := c.c.NewRequest(c.name, "KafkaProducer.MultiPublish", &MessageRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &kafkaProducerServiceMultiPublish{stream}, nil
}

type KafkaProducer_MultiPublishService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*MessageRequest) error
	Recv() (*MessageResponse, error)
}

type kafkaProducerServiceMultiPublish struct {
	stream client.Stream
}

func (x *kafkaProducerServiceMultiPublish) Close() error {
	return x.stream.Close()
}

func (x *kafkaProducerServiceMultiPublish) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *kafkaProducerServiceMultiPublish) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *kafkaProducerServiceMultiPublish) Send(m *MessageRequest) error {
	return x.stream.Send(m)
}

func (x *kafkaProducerServiceMultiPublish) Recv() (*MessageResponse, error) {
	m := new(MessageResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for KafkaProducer service

type KafkaProducerHandler interface {
	SinglePublish(context.Context, *MessageRequest, *MessageResponse) error
	MultiPublish(context.Context, KafkaProducer_MultiPublishStream) error
}

func RegisterKafkaProducerHandler(s server.Server, hdlr KafkaProducerHandler, opts ...server.HandlerOption) error {
	type kafkaProducer interface {
		SinglePublish(ctx context.Context, in *MessageRequest, out *MessageResponse) error
		MultiPublish(ctx context.Context, stream server.Stream) error
	}
	type KafkaProducer struct {
		kafkaProducer
	}
	h := &kafkaProducerHandler{hdlr}
	return s.Handle(s.NewHandler(&KafkaProducer{h}, opts...))
}

type kafkaProducerHandler struct {
	KafkaProducerHandler
}

func (h *kafkaProducerHandler) SinglePublish(ctx context.Context, in *MessageRequest, out *MessageResponse) error {
	return h.KafkaProducerHandler.SinglePublish(ctx, in, out)
}

func (h *kafkaProducerHandler) MultiPublish(ctx context.Context, stream server.Stream) error {
	return h.KafkaProducerHandler.MultiPublish(ctx, &kafkaProducerMultiPublishStream{stream})
}

type KafkaProducer_MultiPublishStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*MessageResponse) error
	Recv() (*MessageRequest, error)
}

type kafkaProducerMultiPublishStream struct {
	stream server.Stream
}

func (x *kafkaProducerMultiPublishStream) Close() error {
	return x.stream.Close()
}

func (x *kafkaProducerMultiPublishStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *kafkaProducerMultiPublishStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *kafkaProducerMultiPublishStream) Send(m *MessageResponse) error {
	return x.stream.Send(m)
}

func (x *kafkaProducerMultiPublishStream) Recv() (*MessageRequest, error) {
	m := new(MessageRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
